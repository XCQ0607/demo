int** 在 C 语言中是一种指针类型，它是一个指向指针的指针。具体来说，它指向一个 int* 类型的指针。它不是一个二维数组，但可以用来实现类似二维数组的效果。以下是详细说明：

指向指针的指针
一个 int** 类型的变量本质上是一个指针，它指向另一个指针，该指针再指向一个整数。
int** p; // p 是一个指向 int* 的指针

示例和解释
为了更好地理解 int**，让我们通过示例来说明。
1. 指向指针的指针
int a = 10;
int* p1 = &a; // p1 是一个指向 int 的指针
int** p2 = &p1; // p2 是一个指向 int* 的指针
printf("%d\n", **p2); // 输出 10
在这个例子中：
a 是一个整数。
p1 是一个指向 a 的指针。
p2 是一个指向 p1 的指针。
2. 动态分配二维数组
虽然 int** 不是二维数组，但我们可以使用它来动态创建一个二维数组。以下是一个示例：

#include <stdio.h>
#include <stdlib.h>
int main() {
    int rows = 3;
    int cols = 4;
    int i, j;
    // 动态分配二维数组
    int** array = (int**)malloc(rows * sizeof(int*));
    for (i = 0; i < rows; i++) {
        array[i] = (int*)malloc(cols * sizeof(int));
    }
    // 初始化二维数组
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            array[i][j] = i * cols + j;
        }
    }
    // 打印二维数组
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            printf("%d ", array[i][j]);
        }
        printf("\n");
    }
    // 释放二维数组
    for (i = 0; i < rows; i++) {
        free(array[i]);     //释放rows行数，列数cols是在具体某一行中
    }
    free(array);
    return 0;
}
在这个例子中：
分配内存：
首先分配一个指向 int* 的指针数组，它的大小是 rows。
然后为每个指针分配一个 int 数组，它的大小是 cols。
初始化二维数组：
通过双重循环，给二维数组赋值。
释放内存：
先释放每一行分配的内存。
然后释放指向行的指针数组。
图示
以下图示帮助理解上述内存分配：
+---------+     +-----------+     +---+---+---+---+
| array   | --> | array[0]  | --> | 0 | 1 | 2 | 3 |
+---------+     +-----------+     +---+---+---+---+
                | array[1]  | --> | 4 | 5 | 6 | 7 |
                +-----------+     +---+---+---+---+
                | array[2]  | --> | 8 | 9 |10 |11 |
                +-----------+     +---+---+---+---+
结论
**int** 是一个指向 int* 类型的指针，用于指向指针的指针。
二维数组：int** 可以用来实现动态的二维数组，但它本身不是二维数组。
使用：通过动态内存分配，我们可以使用 int** 来模拟二维数组的行为。


例如：
(*returnCol)[i] = col; 这一行代码涉及到指针的解引用和数组索引访问。这种调用方法在处理指向指针的指针时很常见，尤其是在动态分配内存并使用二维数组时。
*returnCol：
returnCol 是一个指向 int* 类型的指针，即 int** 类型。
*returnCol 是 returnCol 指向的 int* 类型的指针。

(*returnCol)[i]：
(*returnCol) 先解引用 returnCol，得到一个 int* 类型的指针。
(*returnCol)[i] 访问这个 int* 指针所指向的数组的第 i 个元素。

= col：
将 col 的值赋值给 (*returnCol)[i]。

示例和图示
假设我们有如下的函数，它动态分配一个数组，并在调用者提供的 returnCol 中设置每行的大小：
#include <stdio.h>
#include <stdlib.h>
void allocateAndSetColSizes(int rows, int cols[], int** returnCol) {
    *returnCol = (int*)malloc(sizeof(int) * rows);
    for (int i = 0; i < rows; i++) {
        (*returnCol)[i] = cols[i];
    }
}
int main() {
    int rows = 3;
    int cols[] = {4, 5, 6};
    int* returnCol;
    allocateAndSetColSizes(rows, cols, &returnCol);
    // 打印结果
    for (int i = 0; i < rows; i++) {
        printf("returnCol[%d] = %d\n", i, returnCol[i]);
    }
    // 释放内存
    free(returnCol);
    return 0;
}
代码解读
内存分配：
*returnCol = (int*)malloc(sizeof(int) * rows);
动态分配一个大小为 rows 的 int 数组。
returnCol 是 int** 类型，*returnCol 是 int* 类型。
(*returnCol)[i] 访问 returnCol 指向的数组的第 i 个元素。
赋值操作：
(*returnCol)[i] = cols[i];
解引用 returnCol，获取 int* 类型的数组指针。
将 cols[i] 的值赋值给 (*returnCol)[i]。
打印结果：
循环打印 returnCol 数组的每个元素。
图示
假设 rows = 3 和 cols = {4, 5, 6}：
Initial State:
+--------------+     +--------+
| returnCol    | --> |  NULL  |
+--------------+     +--------+

After malloc:
+--------------+     +---------+---------+---------+
| returnCol    | --> | NULL    | NULL    | NULL    |
+--------------+     +---------+---------+---------+
                    returnCol[0]   returnCol[1]   returnCol[2]

Assign Values:
+--------------+     +---------+---------+---------+
| returnCol    | --> |    4    |    5    |    6    |
+--------------+     +---------+---------+---------+
                    returnCol[0]   returnCol[1]   returnCol[2]
总结
(*returnCol)[i] = col;：
returnCol 是 int** 类型，指向 int* 类型的指针。
*returnCol 解引用，得到 int* 类型的指针。
(*returnCol)[i] 访问 int* 类型的数组的第 i 个元素。
将 col 的值赋给 (*returnCol)[i]。
通过这种方式，可以在函数内部动态分配内存并设置数组的值，然后将结果返回给调用者。



1. 值传递
在 C 语言中，函数参数是通过值传递的。这意味着函数接收到的是参数的一个副本，而不是参数本身。因此，对参数的修改不会影响调用者传入的变量。

错误示例分析
void allocateAndSetColSizes(int rows, int cols[], int* returnCol) {
    returnCol = (int*)malloc(sizeof(int) * rows); // @@@@@这里对 returnCol 的修改只在函数内部有效
    for (int i = 0; i < rows; i++) {
        returnCol[i] = cols[i];
    }
}
int main() {
    int rows = 3;
    int cols[] = {4, 5, 6};
    int* returnCol;
    allocateAndSetColSizes(rows, cols, returnCol);
    // returnCol 在这里仍然是未初始化的指针
    return 0;
}
在这个例子中，returnCol 作为参数传递给 allocateAndSetColSizes 函数。由于是值传递，函数内的 returnCol 是主函数中 returnCol 的一个副本。当 malloc 分配内存并将其地址赋给函数内部的 returnCol 时，实际上只是修改了副本的值，主函数中的 returnCol 并未改变。

2. 使用指向指针的指针
为了让函数能够     修改主函数       中的指针变量，必须传递指针的地址，即使用指向指针的指针（int**）。

图示
假设我们有如下内存布局和调用过程：

主函数中的 returnCol 是一个未初始化的指针。
传递 &returnCol 给函数，函数接收 int** returnCol。
函数内部使用 *returnCol 修改主函数中的 returnCol。
Before malloc:
+-------------+     +--------+
| returnCol   | --> |  NULL  |
+-------------+     +--------+

In function:
int** returnCol = &returnCol_in_main;
*returnCol = (int*)malloc(sizeof(int) * rows);

After malloc:
+-------------+     +---------+---------+---------+
| returnCol   | --> |    4    |    5    |    6    |
+-------------+     +---------+---------+---------+
                    returnCol[0]   returnCol[1]   returnCol[2]
结论
使用 int** returnCol 是必要的，因为它允许函数修改调用者传入的指针，使其指向新的动态分配的内存。值传递无法做到这一点，因为函数内对参数的修改不会影响到调用者传入的变量。
通过这种方式，我们可以确保 allocateAndSetColSizes 函数能够成功地动态分配内存并将其地址返回给主函数中的指针变量 returnCol。